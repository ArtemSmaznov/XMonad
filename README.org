#+TITLE: XMonad
#+AUTHOR: Artem Smaznov
#+DESCRIPTION: A window manager written in Haskell
#+STARTUP: overview
#+PROPERTY: header-args :tangle xmonad.hs

* Table of Contents :toc:
- [[#dependencies][Dependencies]]
- [[#imports][Imports]]
  - [[#base][Base]]
  - [[#actions][Actions]]
  - [[#data][Data]]
  - [[#hooks][Hooks]]
  - [[#layouts][Layouts]]
  - [[#util][Util]]
  - [[#theme][Theme]]
- [[#main][Main]]
- [[#hooks-1][Hooks]]
  - [[#startup-hook][Startup hook]]
  - [[#event-handling][Event handling]]
  - [[#rules][Rules]]
- [[#general-settings][General Settings]]
- [[#apps][Apps]]
- [[#theme-1][Theme]]
- [[#windows][Windows]]
- [[#workspaces][Workspaces]]
- [[#scratchpads][Scratchpads]]
- [[#layouts-1][Layouts]]
- [[#keybindings][Keybindings]]
  - [[#mod-keys][Mod Keys]]
  - [[#keybindings-1][Keybindings]]
  - [[#legacy-keybindings][Legacy Keybindings]]
  - [[#mouse-bindings][Mouse Bindings]]
- [[#xmobar][XMobar]]
  - [[#main-monitor][Main Monitor]]
  - [[#secondary-monitor][Secondary Monitor]]
- [[#help][Help]]

* Dependencies
|----------------+----------------------|
| Name           | Description          |
|----------------+----------------------|
| [[https://archlinux.org/packages/?name=xmonad][xmonad]]         | Window Manager       |
| [[https://archlinux.org/packages/?name=xmonad-contrib][xmonad-contrib]] | Additional Libraries |
| [[https://archlinux.org/packages/?name=xmobar][xmobar]]         | Status Bar           |
| [[https://archlinux.org/packages/?name=trayer][trayer]]         | System Tray widget   |
|----------------+----------------------|

#+begin_example shell
sudo pacman -S xmonad xmonad-contrib xmobar trayer
#+end_example

* Imports
** Base
#+begin_src haskell
import XMonad
import System.Directory
import System.Exit
import System.IO (hPutStrLn)
import qualified XMonad.StackSet as W
#+end_src

** Actions
#+begin_src haskell
import XMonad.Actions.CycleWS
import XMonad.Actions.Navigation2D
#+end_src

** Data
#+begin_src haskell
import Data.Maybe
import Data.Monoid
import qualified Data.Map        as M
#+end_src

** Hooks
#+begin_src haskell
import XMonad.Hooks.DynamicLog (dynamicLogWithPP, wrap, pad, xmobarPP, xmobarColor, shorten, PP(..))
import XMonad.Hooks.EwmhDesktops  -- for some fullscreen events, xcomposite in obs, active window for maim screenshots, etc.
import XMonad.Hooks.ManageDocks (avoidStruts, docksEventHook, manageDocks, ToggleStruts(..))
import XMonad.Hooks.ManageHelpers
import XMonad.Hooks.ServerMode
#+end_src

** Layouts
#+begin_src haskell
import XMonad.Layout.Grid
import XMonad.Layout.MultiColumns
#+end_src

Layout Modifiers
#+begin_src haskell
import XMonad.Layout.MultiToggle
import XMonad.Layout.MultiToggle.Instances
import XMonad.Layout.NoBorders
import XMonad.Layout.Renamed
import XMonad.Layout.Spacing
#+end_src

** Util
#+begin_src haskell
import XMonad.Util.Dmenu
import XMonad.Util.EZConfig
import XMonad.Util.NamedScratchpad
import XMonad.Util.Run (runProcessWithInput, safeSpawn, spawnPipe)
import XMonad.Util.SpawnOnce
#+end_src

** Theme
#+begin_src haskell
import Colors.Gruvbox
#+end_src

* Main
=xmobarPP= Format
#+begin_example haskell
ppFormat = noIdea "foreground" "background" . commands
#+end_example

#+begin_src haskell
main :: IO ()
main = do
    xmproc0 <- spawnPipe "xmobar -x 0 $HOME/.config/xmonad/xmobar/mainScreen.hs"
    xmproc1 <- spawnPipe "xmobar -x 1 $HOME/.config/xmonad/xmobar/secondaryScreen.hs"

    xmonad $ ewmh def
        -- simple stuff
        { terminal           = myTerminal
        , focusFollowsMouse  = myFocusFollowsMouse
        , clickJustFocuses   = myClickJustFocuses
        , borderWidth        = myBorderWidth
        , modMask            = myModMask
        , workspaces         = myWorkspaces
        , normalBorderColor  = myNormalBorderColor
        , focusedBorderColor = myFocusedBorderColor

        -- key bindings
        , keys               = myLegacyKeys
        , mouseBindings      = myMouseBindings

        -- hooks, layouts
        , manageHook         = myManageHook <+> manageDocks
        , handleEventHook    = myEventHook 
                             <+> fullscreenEventHook -- Enables fullscreen for some apps like browsers
        , layoutHook         = lessBorders OnlyScreenFloat
                             $ myLayoutHook
        , startupHook        = myStartupHook
        , logHook            = dynamicLogWithPP $ namedScratchpadFilterOutWorkspacePP $ xmobarPP
            { ppOutput = \x -> hPutStrLn xmproc0 x -- xmobar on Monitor 1
                            >> hPutStrLn xmproc1 x -- xmobar on Monitor 2

            -- Current workspace
            , ppCurrent          = xmobarColor foreground bg3
                                   . wrap ("<box type=Top width=2 color=" ++ color11 ++ ">") "</box>"
                                   . pad

            -- Visible but not current workspace
            , ppVisible          = xmobarColor foreground ""
                                   . wrap ("<box type=Top width=2 color=" ++ color14 ++ ">") "</box>"
                                   . pad
                                   . clickable
            -- Hidden workspaces
            , ppHidden           = xmobarColor foreground ""
                                   . pad
                                   . clickable

            -- Hidden workspaces (no windows)
            , ppHiddenNoWindows  = xmobarColor bg2 ""
                                   . pad
                                   . clickable

            -- Urgent workspace
            , ppUrgent           = xmobarColor color09 ""
                                   . pad
                                   . clickable

            -- Title of active window
            , ppTitle            = xmobarColor foreground ""
                                   . shorten 60

            -- Separator between widgets
            , ppSep              = "<fc=" ++ bg4 ++ "> | </fc>"

            -- order of things in xmobar
            , ppOrder            = \(l:ws:t:_) -> [l,ws,t]
            }

    } `additionalKeysP` myKeysP `additionalKeys` myKeys
#+end_src

* Hooks
** Startup hook
Perform an arbitrary action each time xmonad starts or is restarted
with =mod-ctrl-r=.  Used by, e.g. =XMonad.Layout.PerWorkspace= to initialize
per-workspace layout choices.

By default, do nothing.
#+begin_src haskell
myStartupHook = do
    spawnOnce "$HOME/.config/autostart-scripts/autostart.sh"

    -- System Tray
    spawn "killall trayer"  -- kill current trayer on each restart
    spawn ("sleep 2 && trayer --edge top --align right --widthtype request --padding 6 --SetDockType true --SetPartialStrut true --expand true --monitor 0 --transparent true --alpha 0 " ++ colorTrayer ++ " --height " ++ show myBarSize ++ "")
#+end_src

** Event handling
=EwmhDesktops= users should change this to =ewmhDesktopsEventHook=

Defines a custom handler function for X Events. The function should
return (All True) if the default handler is to be run afterwards. To
combine event hooks use =mappend= or =mconcat= from =Data.Monoid=.
#+begin_src haskell
myEventHook = docksEventHook
#+end_src

** Rules
Execute arbitrary actions and =WindowSet= manipulations when managing
a new window. You can use this to, for example, always float a
particular program, or have a client always appear on a particular
workspace.

To find the property name associated with a program, use

#+begin_example shell
xprop | grep WM_CLASS
#+end_example

and click on the client you're interested in.

To match on the WM_NAME, you can use =title= in the same way that
=className= and =resource= are used below.

#+begin_src haskell
myManageHook = composeAll
    -- General Rules
    [ className =? "confirm"        --> doFloat
    , className =? "file_progress"  --> doFloat
    , className =? "dialog"         --> doFloat
    , className =? "download"       --> doFloat
    , className =? "error"          --> doFloat
    , className =? "Gimp"           --> doFloat
    , className =? "MPlayer"        --> doFloat
    , className =? "notification"   --> doFloat
    , className =? "splash"         --> doFloat
    , className =? "toolbar"        --> doFloat
    , resource  =? "desktop_window" --> doIgnore
    , resource  =? "kdesktop"       --> doIgnore
    , isFullscreen                  --> doFullFloat

    -- Workspace 1 - Internet
    , className =? "firefox"                        --> doShift ( myWorkspaces !! 0 )
    , className =? "Tor Browser"                    --> doShift ( myWorkspaces !! 0 )
    , className =? "Chromium"                       --> doShift ( myWorkspaces !! 0 )
    , className =? "Google-chrome"                  --> doShift ( myWorkspaces !! 0 )
    , className =? "Brave-browser"                  --> doShift ( myWorkspaces !! 0 )
    , className =? "vivaldi-stable"                 --> doShift ( myWorkspaces !! 0 )
    , className =? "qutebrowser"                    --> doShift ( myWorkspaces !! 0 )
    , className =? "nyxt"                           --> doShift ( myWorkspaces !! 0 )

    -- Workspace 2 - Gaming
    , className =? "Wine"                           --> doShift ( myWorkspaces !! 1 )
    , className =? "dolphin-emu"                    --> doShift ( myWorkspaces !! 1 )
    , className =? "Lutris"                         --> doShift ( myWorkspaces !! 1 )
    , className =? "Citra"                          --> doShift ( myWorkspaces !! 1 )
    , className =? "SuperTuxKart"                   --> doShift ( myWorkspaces !! 1 )
    , className =? "Steam"                          --> doShift ( myWorkspaces !! 1 )
    , className =? "battle.net.exe"                 --> doShift ( myWorkspaces !! 1 )
    , title     =? "Steam"                          --> doShift ( myWorkspaces !! 1 )
    , title     =? "Battle.net"                     --> doShift ( myWorkspaces !! 1 )

    -- Workspace 3 - Coding
    , className =? "Emacs"                          --> doShift ( myWorkspaces !! 2 )
    , className =? "Geany"                          --> doShift ( myWorkspaces !! 2 )
    , className =? "Atom"                           --> doShift ( myWorkspaces !! 2 )
    , className =? "Subl3"                          --> doShift ( myWorkspaces !! 2 )
    , className =? "code-oss"                       --> doShift ( myWorkspaces !! 2 )
    , className =? "Oomox"                          --> doShift ( myWorkspaces !! 2 )
    , className =? "Unity"                          --> doShift ( myWorkspaces !! 2 )
    , className =? "UnityHub"                       --> doShift ( myWorkspaces !! 2 )
    , className =? "jetbrains-studio"               --> doShift ( myWorkspaces !! 2 )

    -- Workspace 4 - Computer
    , className =? "dolphin"                        --> doShift ( myWorkspaces !! 3 )
    , className =? "ark"                            --> doShift ( myWorkspaces !! 3 )
    , className =? "Nemo"                           --> doShift ( myWorkspaces !! 3 )
    , className =? "pcmanfm"                        --> doShift ( myWorkspaces !! 3 )
    , className =? "File-roller"                    --> doShift ( myWorkspaces !! 3 )
    , className =? "googledocs"                     --> doShift ( myWorkspaces !! 3 )
    , className =? "keep"                           --> doShift ( myWorkspaces !! 3 )
    , className =? "calendar"                       --> doShift ( myWorkspaces !! 3 )
    
    -- Workspace 5 - Music
    , className =? "Spotify"                        --> doShift ( myWorkspaces !! 4 )
    , className =? "youtubemusic-nativefier-040164" --> doShift ( myWorkspaces !! 4 )
                    
    -- Workspace 6 - Graphics
    , className =? "Gimp"                           --> doShift ( myWorkspaces !! 5 )
    , className =? "Gimp-2.10"                      --> doShift ( myWorkspaces !! 5 )
    , className =? "Gimp"                           --> doShift ( myWorkspaces !! 5 )
    , className =? "Inkscape"                       --> doShift ( myWorkspaces !! 5 )
    , className =? "Flowblade"                      --> doShift ( myWorkspaces !! 5 )
    , className =? "digikam"                        --> doShift ( myWorkspaces !! 5 )
    
    -- Workspace 7 - Video
    , className =? "vlc"                            --> doShift ( myWorkspaces !! 6 )
    , className =? "obs"                            --> doShift ( myWorkspaces !! 6 )
    , className =? "kdenlive"                       --> doShift ( myWorkspaces !! 6 )
    , title     =? "Celluloid"                      --> doShift ( myWorkspaces !! 6 )
    
    -- Workspace 8 - Chat
    , title     =? "whatsapp-for-linux"             --> doShift ( myWorkspaces !! 7 )
    , title     =? "Slack"                          --> doShift ( myWorkspaces !! 7 )
    , title     =? "discord"                        --> doShift ( myWorkspaces !! 7 )
    , title     =? "signal"                         --> doShift ( myWorkspaces !! 7 )
      
    -- Workspace 9 - Sandbox
    , className =? "Virt-manager"                   --> doShift ( myWorkspaces !! 8 )
    , className =? "VirtualBox Manager"             --> doShift ( myWorkspaces !! 8 )
    , className =? "VirtualBox Machine"             --> doShift ( myWorkspaces !! 8 )
    , className =? "Cypress"                        --> doShift ( myWorkspaces !! 8 )
    ] <+> namedScratchpadManageHook myScratchPads
#+end_src

* General Settings
Whether focus follows the mouse pointer.
#+begin_src haskell
myFocusFollowsMouse :: Bool
myFocusFollowsMouse = False
#+end_src

Whether clicking on a window to focus also passes the click to the window
#+begin_src haskell
myClickJustFocuses :: Bool
myClickJustFocuses = False
#+end_src

* Apps
#+begin_src haskell
myTerminal         = "alacritty"
myWebBrowser       = "qutebrowser"
myIncognitoBrowser = "qutebrowser --target private-window"
myTorBrowser       = "torbrowser-launcher"
myGame             = "/usr/bin/steam-runtime %U"
myFileManager      = "pcmanfm"
myTextEditor       = myTerminal ++ " -e vim"
myIde              = "emacsclient -c -a 'emacs'"
myMusicPlayer      = "youtubemusic-nativefier"
myCliMusicPlayer   = myTerminal ++ " -e tmux attach -t music"
myVideoPlayer      = "celluloid"
myVideoEditor      = "kdenlive"
myPhotoLibrary     = "digikam"
myImageEditor      = "gimp"
myVectorEditor     = "inkscape"
myTorrentClient    = "transmission-gtk"
myCalculator       = "gnome-calculator"
myVm               = "virt-manager"

myWhatsApp         = "whatsapp-for-linux"
myDiscord          = "discord"

myLauncher         = "rofi -show drun"
myPasswordManager  = "rofi-pass"
myNetworkManager   = "nm-connection-editor"
myBluetoothManager = "blueman-manager"
myPowerManager     = "xfce4-power-manager-settings"
myAudioManager     = myTerminal ++ " -e alsamixer"
#+end_src

* Theme
#+begin_src haskell
myBarSize = 24
myBorderWidth = 4
                
myGap i = spacingWithEdge i
myGapSize = 7
#+end_src

Border colors for unfocused and focused windows, respectively
#+begin_src haskell
myNormalBorderColor  = color08
myFocusedBorderColor = color09
#+end_src

* Windows
#+begin_src haskell
myFloatingWindow    = W.RationalRect left_margin top_margin width height
    where
        width       = 0.7
        height      = 0.7
        left_margin = (1.0 - width)/2
        top_margin  = (1.0 - height)/2

myScratchpadWindow  = W.RationalRect left_margin top_margin width height
    where
        width       = 0.8
        height      = 0.8
        left_margin = (1.0 - width)/2
        top_margin  = (1.0 - height)/2
  
myScratchpadCalc    = W.RationalRect left_margin top_margin width height
    where
        width       = 0.2
        height      = 0.4
        left_margin = 0.95 - width
        top_margin  = 0.05

myScratchpadChat    = W.RationalRect left_margin top_margin width height
    where
        width       = 0.5
        height      = 0.9
        left_margin = (1.0 - width)/2
        top_margin  = (1.0 - height)/2
#+end_src

Helper Functions
#+begin_src haskell
setFloating   w = W.float w myFloatingWindow 
unsetFloating w = W.sink w 
toggleFloating  = withFocused $ \w -> do 
                       windows (\s -> if M.member w (W.floating s)
                                      then unsetFloating w s
                                      else setFloating w s)
  
toggleMaximize   = sendMessage (Toggle NBFULL)
toggleMirror     = sendMessage (Toggle MIRROR)
toggleFullScreen = sendMessage (Toggle NBFULL)    >> sendMessage ToggleStruts
toggleZen        = sendMessage (Toggle NOBORDERS) >> sendMessage ToggleStruts >> toggleScreenSpacingEnabled >> toggleWindowSpacingEnabled 
toggleBorders    = sendMessage (Toggle NOBORDERS)
toggleStatusBar  = sendMessage ToggleStruts
toggleGaps       = toggleScreenSpacingEnabled     >> toggleWindowSpacingEnabled
#+end_src

* Workspaces
The default number of workspaces (virtual screens) and their names.
By default we use numeric strings, but any string may be used as a
workspace name. The number of workspaces is determined by the length
of this list.

A tagging example:
#+begin_example haskell
workspaces = ["web", "irc", "code" ] ++ map show [4..9]
#+end_example

#+begin_src haskell
myWorkspaces  = [ "<fn=2>\xf268</fn>" -- Internet
                , "<fn=2>\xf1b6</fn>" -- Gaming
                , "<fn=1>\xf11c</fn>" -- Coding
                , "<fn=1>\xf07b</fn>" -- Computer
                , "<fn=1>\xf025</fn>" -- Music
                , "<fn=1>\xf030</fn>" -- Graphics
                , "<fn=1>\xf03d</fn>" -- Video
                , "<fn=1>\xf7cd</fn>" -- Chat
                , "<fn=2>\xf395</fn>" -- Sandbox
                ]
  
myWorkspaceIndices = M.fromList $ zipWith (,) myWorkspaces [1..] -- (,) == \x y -> (x,y)

clickable ws = "<action=xdotool key super+"++show i++">"++ws++"</action>"
    where i = fromJust $ M.lookup ws myWorkspaceIndices
#+end_src

* Scratchpads
#+begin_src haskell
myScratchPads :: [NamedScratchpad]
myScratchPads  = [ NS "terminal"    spawnTerm        findTerm        (customFloating $ myScratchpadWindow)
                 , NS "htop"        spawnHtop        findHtop        (customFloating $ myScratchpadWindow)
                 , NS "music"       spawnMusic       findMusic       (customFloating $ myScratchpadWindow)
                 , NS "virtmanager" spawnVirtManager findVirtManager (customFloating $ myScratchpadWindow)
                 , NS "torrent"     spawnTorrent     findTorrent     (customFloating $ myScratchpadWindow)
                 , NS "calc"        spawnCalc        findCalc        (customFloating $ myScratchpadCalc)
                 , NS "whatsapp"    spawnWhatsApp    findWhatsApp    (customFloating $ myScratchpadChat)
                 , NS "discord"     spawnDiscord     findDiscord     (customFloating $ myScratchpadChat)
                 ]
  
  where
    spawnTerm        = myTerminal ++ " -t scratchpad"
    spawnHtop        = myTerminal ++ " -t htop -e htop"
    spawnMusic       = myMusicPlayer
    spawnVirtManager = myVm
    spawnTorrent     = myTorrentClient
    spawnCalc        = myCalculator
    spawnWhatsApp    = myWhatsApp
    spawnDiscord     = myDiscord
    
    findTerm         = title     =? "scratchpad"
    findHtop         = title     =? "htop"
    findMusic        = className =? "youtubemusic-nativefier-040164"
    findVirtManager  = title     =? "Virtual Machine Manager"
    findTorrent      = className =? "Transmission-gtk"
    findCalc         = className =? "Gnome-calculator"
    findWhatsApp     = className =? "Whatsapp-for-linux"
    findDiscord      = className =? "discord"
#+end_src

* Layouts
Layouts available for selection in the next section
#+begin_src haskell
tall    = renamed [Replace "tall"]   -- default tiling algorithm partitions the screen into two panes
        $ myGap myGapSize
        $ Tall
          1      --- The default number of windows in the master pane
          0.03   --- Percent of screen to increment by when resizing panes
          (0.5)  --- Default proportion of screen occupied by master pane
mirror  = renamed [Replace "mirror"] -- tall layout rotated 90 degrees
        $ Mirror tall
grid    = renamed [Replace "grid"]   -- just a grid layout
        $ myGap myGapSize
        $ Grid
columns = renamed [Replace "columns"]   -- just a grid layout
        $ myGap myGapSize
        $ multiCol
          [1]    --- Windows in each column, starting with master. Set to 0 to catch the rest.
          1      --- Default value for all following columns.
          0.03   --- Percent of screen to increment by when resizing panes
          (-0.5) --- Initial size of master area, or column area if the size is negative.
full    = renamed [Replace "full"]
        $ myGap myGapSize
        $ Full
#+end_src

You can specify and transform your layouts by modifying these values.
If you change layout bindings be sure to use 'mod-shift-space' after
restarting (with =mod-ctrl-r=) to reset your layout state to the new
defaults, as xmonad preserves your old layout settings by default.

#+begin_src haskell
myLayoutHook   = avoidStruts
               $ mkToggle (NBFULL ?? EOT)
               $ mkToggle (NOBORDERS ?? EOT)
               $ mkToggle (single MIRROR)
               $ myLayouts
  where
    myLayouts = tall 
            ||| columns
            ||| full

#+end_src

* Keybindings
** Mod Keys
=modMask= lets you specify which =modkey= you want to use. The default
is =mod1Mask= ("left alt").  You may also consider using =mod3Mask=
("right alt"), which does not conflict with emacs keybindings. The
"windows key" is usually =mod4Mask=.
#+begin_src haskell
myModMask = mod4Mask
#+end_src

|-------+--------|
| Key   | Symbol |
|-------+--------|
| Mod   | M      |
| Shift | S      |
| Ctrl  | C      |
| Alt   | M1     |
|-------+--------|

** Keybindings
#+begin_src haskell
myKeysP :: [(String, X ())]
#+end_src

*** System
Debugging
#+begin_src haskell
myKeysP =
    [ ("M-C-d", toggleZen ) -- Debugging
#+end_src

#+begin_src haskell
    , ("M-C-r"     , spawn "xmonad --recompile; xmonad --restart") -- Restart XMonad
    , ("M-C-q"     , io (exitWith ExitSuccess)                   ) -- Quit XMonad

    -- Extra modifier keys were already added to Xmonad-contrib. Waiting for the new version to be released
    -- , ("S-<Alt_L>" , spawn "$HOME/.local/bin/dmscripts/dm-lang"  ) -- Language Switching

    , ("M-t z"     , toggleZen                                   ) -- Toggle Zen Mode
    , ("M-t g"     , toggleGaps                                  ) -- Toggle Gaps
    , ("M-t b"     , toggleBorders                               ) -- Toggle Window Borders
    , ("M-t s"     , toggleStatusBar                             ) -- Ignore the statusbar
#+end_src

*** Windows
#+begin_src haskell
    , ("M-q"       , kill                          ) -- Close focused Window
    , ("M-<F11>"   , toggleFullScreen              ) -- Toggles Fullscreen
    , ("M-S-f"     , toggleFullScreen              ) -- Toggles Fullscreen
    , ("M-m"       , toggleMaximize                ) -- Toggle Maximize
    , ("M-f"       , toggleFloating                ) -- Toggle Floating
    , ("M1-<Tab>"  , windows W.focusDown           ) -- Move focus to next Window
    , ("M1-S-<Tab>", windows W.focusUp             ) -- Move focus to prev Window
    , ("M-/"       , switchLayer                   ) -- Switch navigation layer (Tiled vs Floating screens)
    , ("M-h"       , windowGo L False              ) -- Move focus to left Window
    , ("M-j"       , windowGo D False              ) -- Move focus to below Window
    , ("M-k"       , windowGo U False              ) -- Move focus to above Window
    , ("M-l"       , windowGo R False              ) -- Move focus to right Window
    , ("M-S-h"     , windowSwap L False            ) -- Swap focused Window with left Window
    , ("M-S-j"     , windowSwap D False            ) -- Swap focused Window with below Window
    , ("M-S-k"     , windowSwap U False            ) -- Swap focused Window with above Window
    , ("M-S-l"     , windowSwap R False            ) -- Swap focused Window with right Window
    , ("M-C-h"     , sendMessage Shrink            ) -- Grow focused Window left
    , ("M-C-l"     , sendMessage Expand            ) -- Grow focused Window right
    , ("M-C-j"     , sendMessage (IncMasterN (-1)) ) -- Decrease number of Master Windows
    , ("M-C-k"     , sendMessage (IncMasterN 1)    ) -- Increase number of Master Windows
#+end_src

*** Monitors
#+begin_src haskell
    , ("M-,"    , screenGo L False       ) -- Move focus to left Screen
    , ("M-."    , screenGo R False       ) -- Move focus to right Screen
    , ("M-S-,"  , windowToScreen L False ) -- Move focused Window to the left Screen
    , ("M-S-."  , windowToScreen R False ) -- Move focused Window to the right Screen
    , ("M-C-S-h", screenSwap L False     ) -- Swap active Screen with the left Screen
    , ("M-C-S-l", screenSwap R False     ) -- Swap active Screen with the right Screen
#+end_src

*** Layouts
#+begin_src haskell
    , ("M-<Space>"   , sendMessage NextLayout            ) -- Switch Layouts
    , ("M-S-<Space>" , sendMessage FirstLayout           ) -- Switch to default Layout
    , ("M-S-m"       , toggleMirror                      ) -- Mirror Layout
    , ("M-="         , refresh                           ) -- Resize viewed windows to the correct size
#+end_src

*** Workspaces
#+begin_src haskell
    , ("M-<Tab>"       , toggleWS ) -- Toggle Workspace
#+end_src

*** Scratchpads
#+begin_src haskell
    , ("M-`"           , namedScratchpadAction myScratchPads "terminal" )
    , ("C-M1-<Delete>" , namedScratchpadAction myScratchPads "htop" )
    , ("M-s h"         , namedScratchpadAction myScratchPads "htop" )
    -- , ("M-s e"      , namedScratchpadAction myScratchPads "files" )
    , ("M-s m"         , namedScratchpadAction myScratchPads "music" )
    , ("M-s c"         , namedScratchpadAction myScratchPads "calc" )
    , ("M-s w"         , namedScratchpadAction myScratchPads "whatsapp" )
    , ("M-s d"         , namedScratchpadAction myScratchPads "discord" )
    , ("M-s v"         , namedScratchpadAction myScratchPads "virtmanager" )
    , ("M-s t"         , namedScratchpadAction myScratchPads "torrent" )
#+end_src

*** Media Keys
#+begin_src haskell
    , ("<XF86AudioLowerVolume>", spawn "amixer set Master 3%- unmute" )
    , ("<XF86AudioRaiseVolume>", spawn "amixer set Master 3%+ unmute" )
    , ("<XF86AudioMute>"       , spawn "amixer set Master toggle"     )
    -- , ("<XF86AudioPlay>"       , spawn "mocp --play"                  )
    -- , ("<XF86AudioPrev>"       , spawn "mocp --previous"              )
    -- , ("<XF86AudioNext>"       , spawn "mocp --next"                  )
#+end_src

*** dm-scripts
#+begin_src haskell
    , ("M-d M-d" , spawn "$HOME/.local/bin/dmscripts/dm-master"     )
    , ("M-d w"   , spawn "$HOME/.local/bin/dmscripts/dm-wallpaper"  )
    , ("M-d r"   , spawn "$HOME/.local/bin/dmscripts/dm-record"     )
    , ("M-d p"   , spawn "$HOME/.local/bin/dmscripts/dm-power"      )
    , ("M-d t"   , spawn "$HOME/.local/bin/dmscripts/dm-theme"      )
    , ("M-d s"   , spawn "$HOME/.local/bin/dmscripts/dm-screenshot" )
    , ("M-d b"   , spawn "$HOME/.local/bin/dmscripts/dm-bookman"    )
    , ("M-d n"   , spawn "$HOME/.local/bin/dmscripts/dm-notify"     )
    , ("M-d \\"  , spawn "$HOME/.local/bin/dmscripts/dm-notify"     )
#+end_src

*** Power Control
#+begin_src haskell
    , ("M1-<F4>", spawn "$HOME/.local/bin/dmscripts/dm-power"         ) -- Logout Menu
    , ("M-z z"  , spawn "$HOME/.local/bin/dmscripts/dm-power"         ) -- Logout Menu
    , ("M-z l"  , spawn "$HOME/.local/bin/dmscripts/dm-power lock"    ) -- Lock Screen
    , ("M-z s"  , spawn "$HOME/.local/bin/dmscripts/dm-power suspend" ) -- Suspend System
    , ("M-z p"  , spawn "$HOME/.local/bin/dmscripts/dm-power poweroff") -- Shutdown System
    , ("M-z r"  , spawn "$HOME/.local/bin/dmscripts/dm-power reboot"  ) -- Reboot System
    , ("M-z w"  , spawn "$HOME/.local/bin/dmscripts/dm-power windows" ) -- Reboot to Windows
#+end_src

*** Screenshot
#+begin_src haskell
    , ("<Print>"    , spawn "$HOME/.local/bin/dmscripts/dm-screenshot screen" ) -- Fullscreen Screenshot
    , ("M-S-<Print>", spawn "$HOME/.local/bin/dmscripts/dm-screenshot area"   ) -- Selection Area Screenshot
    , ("M1-<Print>" , spawn "$HOME/.local/bin/dmscripts/dm-screenshot window" ) -- Active Window Screenshot
    , ("M-<Print>"  , spawn "$HOME/.local/bin/dmscripts/dm-screenshot full"   ) -- Full Desktop Screenshot
#+end_src

*** Notifications
#+begin_src haskell
    , ("M-\\ \\"  , spawn "$HOME/.local/bin/dmscripts/dm-notify recents" ) -- Show recent Notifications
    , ("M-\\ r"   , spawn "$HOME/.local/bin/dmscripts/dm-notify recents" ) -- Show recent Notifications
    , ("M-\\ S-c" , spawn "$HOME/.local/bin/dmscripts/dm-notify clear"   ) -- Clear all Notifications
    , ("M-\\ c"   , spawn "$HOME/.local/bin/dmscripts/dm-notify close"   ) -- Clear last Notification
    , ("M-\\ a"   , spawn "$HOME/.local/bin/dmscripts/dm-notify context" ) -- Open last Notification
#+end_src

*** Launching Apps
#+begin_src haskell
    , ("C-M1-t"    , spawn (myTerminal)        ) -- Launch Terminal
    , ("M-<Return>", spawn (myTerminal)        ) -- Launch Terminal
    , ("M-c"       , spawn (myIde)             ) -- Launch IDE
    , ("M-e"       , spawn (myFileManager)     ) -- Launch File Manager
    , ("M-b"       , spawn (myWebBrowser)      ) -- Launch Web Browser
    , ("M-i"       , spawn (myIncognitoBrowser)) -- Launch Web Browser in Incognito Mode
    , ("M-p"       , spawn (myPasswordManager) ) -- Autofill Passwords
    , ("M-r"       , spawn (myLauncher)        ) -- Launch Launcher
    , ("M-S-r"     , spawn "dmenu_run"         ) -- Launch dmenu
    -- Primary
    , ("M-o t"     , spawn (myTorBrowser)      ) -- Launch Tor Browser
    , ("M-o m"     , spawn (myMusicPlayer)     ) -- Launch Music Player
    , ("M-o v"     , spawn (myVideoPlayer)     ) -- Launch Video Player
    , ("M-o s"     , spawn (myGame)            ) -- Launch Steam
    -- Secondary
    , ("C-M1-o t"  , spawn (myTextEditor)      ) -- Launch Text Editor
    , ("C-M1-o p"  , spawn (myPhotoLibrary)    ) -- Launch Photo Library
    , ("C-M1-o g"  , spawn (myImageEditor)     ) -- Launch Image Editor
    , ("C-M1-o r"  , spawn (myVectorEditor)    ) -- Launch Vector Editor
    , ("C-M1-o v"  , spawn (myVideoEditor)     ) -- Launch Video Editor
  ]
#+end_src

** Legacy Keybindings
#+begin_src haskell
myKeys :: [((KeyMask, KeySym), X ())]
myKeys =
    [ ((shiftMask, xK_Alt_L), spawn "$HOME/.local/bin/dmscripts/dm-lang"  ) -- Language Switching

    -- Push window back into tiling
    -- , ((mod4Mask,               xK_t     ), withFocused $ windows . W.sink)

    -- Run xmessage with a summary of the default keybindings (useful for beginners)
    -- , ((mod4Mask .|. shiftMask, xK_slash ), spawn ("echo \"" ++ help ++ "\" | xmessage -file -"))

    -- Toggle the status bar gap
    -- Use this binding with avoidStruts from Hooks.ManageDocks.
    -- See also the statusBar function from Hooks.DynamicLog.
    -- , ((mod4Mask          , xK_b     ), sendMessage ToggleStruts)
    ]

myLegacyKeys conf@(XConfig {XMonad.modMask = modm}) = M.fromList $

    -- mod-[1..9], Switch to workspace N
    -- mod-shift-[1..9], Move client to workspace N
    [((m .|. modm, k), windows $ f i)
        | (i, k) <- zip (XMonad.workspaces conf) [xK_1 .. xK_9]
        , (f, m) <- [(W.greedyView, 0), (W.shift, shiftMask)]]
    ++

    -- mod-{w,e,r}, Switch to physical/Xinerama screens 1, 2, or 3
    -- mod-shift-{w,e,r}, Move client to screen 1, 2, or 3
    [((m .|. modm, key), screenWorkspace sc >>= flip whenJust (windows . f))
        | (key, sc) <- zip [xK_F1, xK_F2, xK_F3] [0..]
        , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]
#+end_src

** Mouse Bindings
Mouse bindings: default actions bound to mouse events
#+begin_src haskell
myMouseBindings (XConfig {XMonad.modMask = modm}) = M.fromList $

    -- mod-button1, Set the window to floating mode and move by dragging
    [ ((modm, button1), (\w -> focus w >> mouseMoveWindow w
                                       >> windows W.shiftMaster))

    -- mod-button2, Raise the window to the top of the stack
    , ((modm, button2), (\w -> focus w >> windows W.shiftMaster))

    -- mod-button3, Set the window to floating mode and resize by dragging
    , ((modm, button3), (\w -> focus w >> mouseResizeWindow w
                                       >> windows W.shiftMaster))

    -- you may also bind events to the mouse scroll wheel (button4 and button5)
    ]
#+end_src

* XMobar
** Global
:PROPERTIES:
:header-args: :tangle no :noweb-ref GLOBAL
:END:
*** Appearance
#+begin_src haskell
Config {
   -- appearance
     font            = "xft:SF Pro Text Regular:size=9:bold:antialias=true"
   , additionalFonts = [ "xft:Font Awesome 5 Free Solid:pixelsize=16"
                       , "xft:Font Awesome 5 Brands:pixelsize=16"
                       , "xft:Font Awesome 5 Free Solid:pixelsize=14"
                       , "xft:Mononoki:pixelsize=11:antialias=true:hinting=true"
                       ]
   , bgColor         = "#282828"
   , fgColor         = "#ebdbb2"
   , position        = TopH 24
#+end_src

*** General Behavior
#+begin_src haskell
   , lowerOnStart     = True    -- send to bottom of window stack on start
   , hideOnStart      = False   -- start with window unmapped (hidden)
   , allDesktops      = True    -- show on all desktops
   , overrideRedirect = True    -- set the Override Redirect flag (Xlib)
   , pickBroadest     = False   -- choose widest display (multi-monitor)
   , persistent       = True    -- enable/disable hiding (True = disabled)
#+end_src

*** Layout
#+begin_src haskell
   , sepChar  = "%"   -- delineator between plugin names and straight text
   , alignSep = "}{"  -- separator between left-right alignment
   , iconRoot = ".config/xmonad/xpm/"
#+end_src

*** Widgets
**** Separator
#+begin_src haskell
   , commands =
        [ Run Com "echo" ["<fc=#7c6f64>|</fc>"] "separator" 3600
#+end_src

**** Time
#+begin_src haskell
        , Run Date
          " %l:%M %p"
          "time" 10
#+end_src

**** Updates
#+begin_src haskell
        , Run Com "echo" ["<box type=Bottom width=2 mb=2 color=#fb4934>  <fn=3>\xf0f3</fn> "] "u_icon" 3600
        , Run Com ".config/xmonad/scripts/updates" [] "updates" 3600
#+end_src

**** Network
#+begin_src haskell
        , Run DynNetwork
          ["-t", "<box type=Bottom width=2 mb=2 color=#8ec07c>  <fn=3>\xf0ac</fn>  <rx> <fn=3>\xf309\xf30c</fn> <tx> </box>"
               , "-S", "True"
               , "--"
               , "--devices", "eno1,wlan0,enp2s0f0"
               ] 20
#+end_src

**** CPU
#+begin_src haskell
        , Run CoreTemp
          ["-t", "<box type=Bottom width=2 mb=2 color=#d3869b>  <fn=3>\xf2db</fn>  <core0>° "
               -- High CPU Temp
               , "-H", "70"
               , "-h", "#fb4934"
               -- Low CPU Temp
               , "-L", "40"
               , "-l", "#b8bb26"
               ] 20
        , Run Cpu
          ["-t", "(<total>%)  </box>"
               -- High CPU Load
               , "-H", "80"
               , "-h", "#fb4934"
               -- Low CPU Load
               , "-L", "5"
               , "-l", "#b8bb26"
               ] 20
#+end_src

**** RAM
#+begin_src haskell
        , Run Memory
          ["-t", "<box type=Bottom width=2 mb=2 color=#83a598>  <fn=3>\xf538</fn>  <used> M (<usedratio>%)  </box>"
               ] 20
#+end_src

**** Volume
#+begin_src haskell
        , Run Volume "default" "Master"
          ["-t", "<box type=Bottom width=2 mb=2 color=#b8bb26>  <status>  <volume>%  </box>"
               , "--"
               -- ON Icon
               , "-O", "<fn=3>\xf028</fn>"
               , "-C", "#b8bb26"
               -- OFF Icon
               , "-o", "<fn=3>\xf6a9</fn>"
               , "-c", "#fb4934"
               ] 10
#+end_src

**** Up-time
#+begin_src haskell
        , Run Uptime
          ["-t", "<box type=Bottom width=2 mb=2 color=#fabd2f>  <fn=3>\xf0aa</fn>  <days>d <hours>h  </box>"
               ] 3600
#+end_src

**** Date
#+begin_src haskell
        , Run Date
          "<box type=Bottom width=2 mb=2 color=#fb4934>  <fn=3>\xf133</fn>  %a, %d %b %Y  </box>"
          "date" 3600
#+end_src

**** Keyboard
Keyboard Layout Indicator
#+begin_src haskell
        , Run Kbd
          [ ("us" , "US ")
          , ("ru" , "RU ")
          ]
#+end_src

**** Trayer
Script that dynamically adjusts xmobar padding depending on number of trayer icons.
#+begin_src haskell
        , Run Com ".config/xmonad/xmobar/trayer-padding-icon.sh" [] "trayerpad" 20
#+end_src

**** Unsafe Stdin Reader
Workspaces, layout, window name received from XMonad
#+begin_src haskell
        , Run UnsafeStdinReader
        ]
#+end_src

** Main Monitor Template
#+begin_src haskell :noweb yes :tangle xmobar/mainScreen.hs
<<GLOBAL>>
  , template = "%time% %separator% %UnsafeStdinReader% }{ %kbd% %u_icon% %updates%  </box> %dynnetwork% %coretemp%%cpu% %memory% %default:Master% %uptime% %date% %trayerpad%"
   }
#+end_src

** Secondary Monitor Template
#+begin_src haskell :noweb yes :tangle xmobar/secondaryScreen.hs
<<GLOBAL>>
   , template = "%time% %separator% %UnsafeStdinReader% }{ %kbd% %u_icon% %updates%  </box> %dynnetwork% %coretemp%%cpu% %memory% %default:Master% %uptime% %date% "
   }
#+end_src

* TODO Help
- Not updated yet
Finally, a copy of the default bindings in simple textual tabular format.
#+begin_src haskell
help :: String
help = unlines ["The default modifier key is 'alt'. Default keybindings:",
    "",
    "-- launching and killing programs",
    "mod-Shift-Enter  Launch xterminal",
    "mod-p            Launch dmenu",
    "mod-Shift-p      Launch gmrun",
    "mod-Shift-c      Close/kill the focused window",
    "mod-Space        Rotate through the available layout algorithms",
    "mod-Shift-Space  Reset the layouts on the current workSpace to default",
    "mod-n            Resize/refresh viewed windows to the correct size",
    "",
    "-- move focus up or down the window stack",
    "mod-Tab        Move focus to the next window",
    "mod-Shift-Tab  Move focus to the previous window",
    "mod-j          Move focus to the next window",
    "mod-k          Move focus to the previous window",
    "mod-m          Move focus to the master window",
    "",
    "-- modifying the window order",
    "mod-Return   Swap the focused window and the master window",
    "mod-Shift-j  Swap the focused window with the next window",
    "mod-Shift-k  Swap the focused window with the previous window",
    "",
    "-- resizing the master/slave ratio",
    "mod-h  Shrink the master area",
    "mod-l  Expand the master area",
    "",
    "-- floating layer support",
    "mod-t  Push window back into tiling; unfloat and re-tile it",
    "",
    "-- increase or decrease number of windows in the master area",
    "mod-comma  (mod-,)   Increment the number of windows in the master area",
    "mod-period (mod-.)   Deincrement the number of windows in the master area",
    "",
    "-- quit, or restart",
    "mod-Shift-q  Quit xmonad",
    "mod-q        Restart xmonad",
    "mod-[1..9]   Switch to workSpace N",
    "",
    "-- Workspaces & screens",
    "mod-Shift-[1..9]   Move client to workspace N",
    "mod-{w,e,r}        Switch to physical/Xinerama screens 1, 2, or 3",
    "mod-Shift-{w,e,r}  Move client to screen 1, 2, or 3",
    "",
    "-- Mouse bindings: default actions bound to mouse events",
    "mod-button1  Set the window to floating mode and move by dragging",
    "mod-button2  Raise the window to the top of the stack",
    "mod-button3  Set the window to floating mode and resize by dragging"]
#+end_src
